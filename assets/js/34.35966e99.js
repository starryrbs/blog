(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{259:function(n,e,t){"use strict";t.r(e);var a=t(2),o=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"_1-什么是-命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-命令模式","aria-hidden":"true"}},[n._v("#")]),n._v(' 1. 什么是"命令模式"?')]),n._v(" "),t("blockquote",[t("p",[n._v("命令模式是一种数据驱动的设计模式，它属于行为型模式。")])]),n._v(" "),t("ol",[t("li",[n._v("请求以命令的形式包裹在对象中，并传给调用对象。")]),n._v(" "),t("li",[n._v("调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象。")]),n._v(" "),t("li",[n._v("该对象执行命令。")])]),n._v(" "),t("p",[n._v("在这三步骤中，分别有 3 个不同的主体：发送者、传递者和执行者。在实现过程中，需要特别关注。")]),n._v(" "),t("h2",{attrs:{id:"_2-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用场景","aria-hidden":"true"}},[n._v("#")]),n._v(" 2. 应用场景")]),n._v(" "),t("p",[n._v("有时候需要向某些对象发送请求，但是又不知道请求的接受者是谁，更不知道被请求的操作是什么。此时，命令模式就是以一种松耦合的方式来设计程序。")]),n._v(" "),t("h2",{attrs:{id:"_3-代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现","aria-hidden":"true"}},[n._v("#")]),n._v(" 3. 代码实现")]),n._v(" "),t("h3",{attrs:{id:"_3-1-python3-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-python3-实现","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.1 python3 实现")]),n._v(" "),t("p",[n._v("命令对象将动作的接收者设置在属性中，并且对外暴露了 execute 接口（按照习惯约定）。")]),n._v(" "),t("p",[n._v("在其他类设置命令并且执行命令的时候，只需要按照约定调用 Command 对象的 execute()即可。到底是谁接受命令，并且怎么执行命令，都交给 Command 对象来处理！")]),n._v(" "),t("pre",[t("code",[n._v("class Receiver:\n    def action(self):\n        print(\"do something\")\n\n\nclass Command:\n    def __init__(self, receiver):\n        self.receiver = receiver\n\n    def execute(self):\n        self.receiver.action()\n\n\nclass Button:\n    def __init__(self):\n        self.command = None\n\n    def set_command(self, command):\n        self.command = command\n\n    def down(self):\n        if not self.command:\n            return\n        self.command.execute()\n\n\nif __name__ == '__main__':\n    receiver = Receiver()\n    command = Command(receiver)\n    button = Button()\n    button.set_command(command)\n    button.down()\n")])]),n._v(" "),t("h3",{attrs:{id:"_3-2-es6-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-es6-实现","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.2 ES6 实现")]),n._v(" "),t("p",[n._v("setCommand 方法为按钮指定了命令对象，命令对象为调用者（按钮）找到了接收者（MenuBar），并且执行了相关操作。而按钮本身并不需要关心接收者和接受操作。")]),n._v(" "),t("p",[n._v("在 test.js 中:")]),n._v(" "),t("pre",[t("code",[n._v('const childPage ={\n    refresh: () => {\n      console.log("刷新了子页面");\n      window.location.reload();\n    }\n};\n\nconst command = receiver => {\n  return {\n    execute: () => {\n      console.log(receiver);\n      receiver.refresh();\n    }\n  };\n};\n\n\nconst setCommand = (button, command) => {\n  button.onclick = () => {\n    console.log(command);\n    command.execute();\n  };\n};\n\nlet refreshCommand = command(childPage);\nlet button = document.querySelector("button");\nconsole.log(button);\nsetCommand(button, refreshCommand);\n')])]),n._v(" "),t("p",[n._v("在 index.html 中")]),n._v(" "),t("pre",[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n</head>\n<body>\n<button>刷新页面</button>\n<script src="test.js"><\/script>\n</body>\n</html>\n')])]),n._v(" "),t("p",[n._v("打开浏览器，点击刷新按钮就可以看到命令效果了")])])},[],!1,null,null,null);e.default=o.exports}}]);