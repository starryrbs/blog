(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{283:function(e,t,n){"use strict";n.r(t);var o=n(2),a=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("blockquote",[n("p",[e._v("Node.js 异步编程的直接体现就是回调。异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。")])]),e._v(" "),n("p",[e._v("实际用处:")]),e._v(" "),n("p",[e._v("例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。")]),e._v(" "),n("p",[e._v("回调函数一般作为函数的最后一个参数出现：")]),e._v(" "),n("pre",[n("code",[e._v("function foo1(name, age, callback) { }\nfunction foo2(value, callback1, callback2) { }\n")])]),e._v(" "),n("p",[e._v("阻塞代码示例:")]),e._v(" "),n("pre",[n("code",[e._v('const fs = require("fs");\nlet data = fs.readFileSync("input.txt");\nconsole.log(data.toString())\n')])]),e._v(" "),n("p",[e._v("非阻塞代码示例:")]),e._v(" "),n("pre",[n("code",[e._v('const fs = require("fs");\nfs.readFile("input.txt", function(err, data) {\n  if (err) {\n    return console.log(err.message);\n  }\n  console.log(data.toString());\n});\n')])]),e._v(" "),n("p",[e._v("以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。")]),e._v(" "),n("blockquote",[n("p",[e._v("因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。")])])])},[],!1,null,null,null);t.default=a.exports}}]);